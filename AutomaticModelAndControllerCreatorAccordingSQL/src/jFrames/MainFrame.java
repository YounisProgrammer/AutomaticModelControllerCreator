package jFrames;

import databaseManager.*;
import java.util.Iterator;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import beans.*;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;   
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import resources.Resources;

public class MainFrame extends javax.swing.JFrame{

    /** Creates new form MainFrame */
    private ArrayList<TableBean> sqlTables;
    private ListSelectionModel tableSelectionModel;
    private String destinationFolderPath="";
    private String folderName;
    public MainFrame() {
        initComponents();
        this.setIconImage(new javax.swing.ImageIcon(new java.io.File("icons\\mvc.png").getAbsolutePath()).getImage());
        tableSelectionModel=table.getSelectionModel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mySqlRadio = new javax.swing.JRadioButton();
        accessRadio = new javax.swing.JRadioButton();
        oracleRadio = new javax.swing.JRadioButton();
        databaseNameField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        dbTableLabel = new javax.swing.JLabel();
        tablesCombo = new javax.swing.JComboBox<TableBean>();
        statusLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        passwordField = new javax.swing.JTextField();
        columnsRadio = new javax.swing.JRadioButton();
        beanMethodsRadio = new javax.swing.JRadioButton();
        showLabel = new javax.swing.JLabel();
        generateClassesBtn = new javax.swing.JButton();
        saveLabel = new javax.swing.JLabel();
        saveField = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        databaseManagerCheck = new javax.swing.JCheckBox();
        beansCheck = new javax.swing.JCheckBox();
        databaseManagerRadio = new javax.swing.JRadioButton();
        toStringLabel = new javax.swing.JLabel();
        toStringCombo = new javax.swing.JComboBox<String>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Automatic Model and Controller Creator According SQL");
        setMinimumSize(new java.awt.Dimension(1208, 596));
        setPreferredSize(new java.awt.Dimension(1208, 626));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.setEnabled(false);
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 173, 1208, 375));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Powered By: Younis Abbasi");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("DB Name:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 44, 104, -1));

        buttonGroup1.add(mySqlRadio);
        mySqlRadio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        mySqlRadio.setSelected(true);
        mySqlRadio.setText("MySQL");
        mySqlRadio.setActionCommand("mysql");
        mySqlRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mySqlRadioActionPerformed(evt);
            }
        });
        getContentPane().add(mySqlRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 76, 69, -1));

        buttonGroup1.add(accessRadio);
        accessRadio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        accessRadio.setText("Access");
        accessRadio.setActionCommand("access");
        accessRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessRadioActionPerformed(evt);
            }
        });
        getContentPane().add(accessRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 122, -1, -1));

        buttonGroup1.add(oracleRadio);
        oracleRadio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        oracleRadio.setText("Oracle");
        oracleRadio.setActionCommand("oracle");
        oracleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oracleRadioActionPerformed(evt);
            }
        });
        getContentPane().add(oracleRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 99, 69, -1));

        databaseNameField.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        getContentPane().add(databaseNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 44, 258, 26));

        searchBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchBtn.setText("SEARCH");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1022, 44, 150, 26));

        dbTableLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        dbTableLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dbTableLabel.setText("DB Tables:");
        dbTableLabel.setEnabled(false);
        getContentPane().add(dbTableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 77, 104, 25));

        tablesCombo.setModel(new javax.swing.DefaultComboBoxModel<TableBean>());
        tablesCombo.setEnabled(false);
        tablesCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablesComboActionPerformed(evt);
            }
        });
        getContentPane().add(tablesCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 79, 258, 25));

        statusLabel.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusLabel.setText("No Info!!");
        statusLabel.setEnabled(false);
        getContentPane().add(statusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(506, 79, 245, 23));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Username:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(506, 44, 104, -1));

        usernameField.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        getContentPane().add(usernameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(614, 44, 143, 26));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Password:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(761, 44, 104, -1));

        passwordField.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        getContentPane().add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(869, 44, 143, 26));

        buttonGroup2.add(columnsRadio);
        columnsRadio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        columnsRadio.setSelected(true);
        columnsRadio.setText("Columns");
        columnsRadio.setActionCommand("columns");
        columnsRadio.setEnabled(false);
        columnsRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnsRadioActionPerformed(evt);
            }
        });
        getContentPane().add(columnsRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, -1, -1));

        buttonGroup2.add(beanMethodsRadio);
        beanMethodsRadio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        beanMethodsRadio.setText("Bean Methods");
        beanMethodsRadio.setActionCommand("databaseMethods");
        beanMethodsRadio.setEnabled(false);
        beanMethodsRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beanMethodsRadioActionPerformed(evt);
            }
        });
        getContentPane().add(beanMethodsRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(669, 140, -1, -1));

        showLabel.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        showLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        showLabel.setText("Show :");
        showLabel.setEnabled(false);
        getContentPane().add(showLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(532, 140, -1, 23));

        generateClassesBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        generateClassesBtn.setText("GENERATE CLASSES");
        generateClassesBtn.setEnabled(false);
        generateClassesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateClassesBtnActionPerformed(evt);
            }
        });
        getContentPane().add(generateClassesBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1019, 559, -1, 26));

        saveLabel.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        saveLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        saveLabel.setText("Save:");
        saveLabel.setEnabled(false);
        getContentPane().add(saveLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 562, -1, -1));

        saveField.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        saveField.setEnabled(false);
        getContentPane().add(saveField, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 560, 525, 26));

        browseBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        browseBtn.setText("BROWSE");
        browseBtn.setEnabled(false);
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(browseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(598, 560, 154, -1));

        databaseManagerCheck.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        databaseManagerCheck.setText("Database Manager");
        databaseManagerCheck.setEnabled(false);
        databaseManagerCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseManagerCheckActionPerformed(evt);
            }
        });
        getContentPane().add(databaseManagerCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(817, 562, -1, -1));

        beansCheck.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        beansCheck.setText("Beans");
        beansCheck.setEnabled(false);
        beansCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beansCheckActionPerformed(evt);
            }
        });
        getContentPane().add(beansCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 562, -1, -1));

        buttonGroup2.add(databaseManagerRadio);
        databaseManagerRadio.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        databaseManagerRadio.setText("DatabaseManager Methods");
        databaseManagerRadio.setActionCommand("databaseMethods");
        databaseManagerRadio.setEnabled(false);
        databaseManagerRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseManagerRadioActionPerformed(evt);
            }
        });
        getContentPane().add(databaseManagerRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(778, 140, -1, -1));

        toStringLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        toStringLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        toStringLabel.setText("toString");
        toStringLabel.setEnabled(false);
        getContentPane().add(toStringLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 115, 258, -1));

        toStringCombo.setModel(new javax.swing.DefaultComboBoxModel<String>());
        toStringCombo.setEnabled(false);
        getContentPane().add(toStringCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 138, 258, 25));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Select DBMS: ");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 46, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        clearFields(false);
        SQLBean bean=getSQLFieldsData();
        if(bean!=null){
            try{
                DatabaseManager.createConnection(bean.getSql(),bean.getDbName(),bean.getUsername(),bean.getPassword());
                sqlTables=DatabaseManager.getTables();
                
                //Don't put DatabaseManager Code here!!
                loadFirst(); 
                
            }catch(java.sql.SQLException sqle){
                sqle.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(null,"Database not found Error: "+sqle);
            }catch(Exception e){
                e.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(null,"Database not found Error: "+e);
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed
    
    private void loadFirst(){
        setFieldsEnabled(true,true);
        statusLabel.setText(databaseNameField.getText());
        setTablesComboData(sqlTables);
        folderName=resources.Decoder.getCamelCase(databaseNameField.getText())+"MVC";
        
        if(accessRadio.isSelected()){
            String url=databaseNameField.getText().substring(databaseNameField.getText().lastIndexOf("\\"));
            folderName=new java.util.StringTokenizer(url,".").nextToken().replace("\\","")+"MVC";
        }
        
        destinationFolderPath=new java.io.File("Generated_Data\\").getAbsolutePath()+"\\"+folderName;
        saveField.setText(destinationFolderPath);
        toStringCombo.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent ae){
                toStringCombooActionPerformed(ae);
            }
        });
        
        tableSelectionModel.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
            public void valueChanged(javax.swing.event.ListSelectionEvent event){
                sqlTableSelectionListener(event);
            }
        });
    
    }//End of loadFirst method
    
    private void tablesComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablesComboActionPerformed
        TableBean table=(TableBean)tablesCombo.getSelectedItem();
        if(table!=null){
            setToStringComboData(table);
            if(columnsRadio.isSelected())
                setTableColumnsData(table);
            if(beanMethodsRadio.isSelected())
                setTableBeanMethodsData(table);
            if(databaseManagerRadio.isSelected())
                setTableDatabaseMethodsData(table);
        }
    }//GEN-LAST:event_tablesComboActionPerformed

    private void generateClassesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateClassesBtnActionPerformed
        if(beansCheck.isSelected())    Resources.createBeans(saveField.getText(), sqlTables);
        if(databaseManagerCheck.isSelected())  Resources.createDatebaseManager(saveField.getText(), sqlTables);
    }//GEN-LAST:event_generateClassesBtnActionPerformed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        java.awt.FileDialog dialog=new java.awt.FileDialog(this,"Save As",java.awt.FileDialog.SAVE);
         
        dialog.setFile(folderName);
        dialog.setDirectory(new java.io.File("Generated_Data").getAbsolutePath());
        dialog.setVisible(true);
        String dir=dialog.getDirectory();
        
        if(dir!=null)   saveField.setText(dir+folderName);
        
    }//GEN-LAST:event_browseBtnActionPerformed

    private void columnsRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnsRadioActionPerformed
        setFieldsEnabled(true);
        TableBean bean=(TableBean)tablesCombo.getSelectedItem();
        if(bean!=null)  setTableColumnsData(bean);
    }//GEN-LAST:event_columnsRadioActionPerformed

    private void beanMethodsRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beanMethodsRadioActionPerformed
        setFieldsEnabled(false);
        TableBean bean=(TableBean)tablesCombo.getSelectedItem();
        if(bean!=null)  setTableBeanMethodsData(bean);
    }//GEN-LAST:event_beanMethodsRadioActionPerformed

    private void databaseManagerRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseManagerRadioActionPerformed
        setFieldsEnabled(false);
        TableBean bean=(TableBean)tablesCombo.getSelectedItem();
        int beanIndex=tablesCombo.getSelectedIndex();
        if(bean!=null){
            sqlTables.get(beanIndex).setDeleteMethods(Resources.getDeleteMethods(bean));
            sqlTables.get(beanIndex).setAddMethods(Resources.getAddMethod(bean));
            sqlTables.get(beanIndex).setDeleteStatusMethods(Resources.getDeleteStatusMethods(bean));
            sqlTables.get(beanIndex).setUpdateMethods(Resources.getUpdateMethods(bean));
            sqlTables.get(beanIndex).setGetMethods(Resources.getGetMethods(bean));
            
            setTableDatabaseMethodsData(bean);
        }
    }//GEN-LAST:event_databaseManagerRadioActionPerformed

    private void mySqlRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mySqlRadioActionPerformed
        clearFields(false);
    }//GEN-LAST:event_mySqlRadioActionPerformed

    private void oracleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oracleRadioActionPerformed
        clearFields(false);
    }//GEN-LAST:event_oracleRadioActionPerformed

    private void accessRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessRadioActionPerformed
        clearFields(false);
    }//GEN-LAST:event_accessRadioActionPerformed

    private void databaseManagerCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseManagerCheckActionPerformed
        
    }//GEN-LAST:event_databaseManagerCheckActionPerformed

    private void beansCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beansCheckActionPerformed
        
    }//GEN-LAST:event_beansCheckActionPerformed
    
    private void toStringCombooActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(evt.getSource()==toStringCombo){
            int tableIndex=tablesCombo.getSelectedIndex();
            TableBean tableBean=(TableBean)tablesCombo.getSelectedItem();
            String selectedToString=(String)toStringCombo.getSelectedItem();

            if(selectedToString!=null)
            sqlTables.get(tableIndex).setToStringVariable(Resources.toStringMethod(selectedToString));
            setToStringComboData(tableBean);
        }
    }
    
    private void sqlTableSelectionListener(javax.swing.event.ListSelectionEvent event){
        int selectedIndex=table.getSelectedRow();
        int tableIndex=tablesCombo.getSelectedIndex();
        
        if(columnsRadio.isSelected() && selectedIndex!=-1){
            ColumnBean selectedBean=(ColumnBean)table.getModel().getValueAt(selectedIndex,2);
            boolean isSelected=(Boolean)table.getModel().getValueAt(selectedIndex,6);
            
            if(selectedBean!=null && selectedIndex!=-1){
                sqlTables.get(tableIndex).getColumns().get(selectedIndex).setUseAsArguments(isSelected);
                
                TableBean bean=(TableBean)tablesCombo.getSelectedItem();
                int beanIndex=tablesCombo.getSelectedIndex();
                if(bean!=null){
                    sqlTables.get(beanIndex).setDeleteMethods(Resources.getDeleteMethods(bean));
                    sqlTables.get(beanIndex).setAddMethods(Resources.getAddMethod(bean));
                    sqlTables.get(beanIndex).setDeleteStatusMethods(Resources.getDeleteStatusMethods(bean));
                    sqlTables.get(beanIndex).setUpdateMethods(Resources.getUpdateMethods(bean));
                    sqlTables.get(beanIndex).setGetMethods(Resources.getGetMethods(bean));
                }
            }
        }
    }              
    
    private void setTableDatabaseMethodsData(TableBean bean){
        MethodBean addMethod=bean.getAddMethod();
        ArrayList<MethodBean> getMethods=bean.getGetMethods();
        ArrayList<MethodBean> updateMethods=bean.getUpdateMethods();
        ArrayList<MethodBean> deleteStatusMethods=bean.getDeleteStatusMethods();
        ArrayList<MethodBean> deleteMethods=bean.getDeleteMethods();
        
        String[] colNames={"Method Number","Method Name","Class"};
        Object[][] data=new Object[getMethods.size()+updateMethods.size()+deleteStatusMethods.size()+deleteMethods.size()+1][colNames.length];
        
        int j=0;
        data[j][0]=1;
        data[j][1]=addMethod.getMethodName();
        data[j][2]=bean.getBeanName();
        
        for(int i=0;i<getMethods.size();i++){
            j++;
            MethodBean set=getMethods.get(i);
            
            data[j][0]=(j+1);
            data[j][1]=set.getMethodName();
            data[j][2]=bean.getBeanName();
            
        }
  
        for(int i=0;i<updateMethods.size();i++){
            j++;
            MethodBean set=updateMethods.get(i);
            
            data[j][0]=(j+1);
            data[j][1]=set.getMethodName();
            data[j][2]=bean.getBeanName();
        }
        
        for(int i=0;i<deleteStatusMethods.size();i++){
            j++;
            MethodBean set=deleteStatusMethods.get(i);
            
            data[j][0]=(j+1);
            data[j][1]=set.getMethodName();
            data[j][2]=bean.getBeanName();
        }
        
        for(int i=0;i<deleteMethods.size();i++){
            j++;
            MethodBean set=deleteMethods.get(i);
            
            data[j][0]=(j+1);
            data[j][1]=set.getMethodName();
            data[j][2]=bean.getBeanName();
        }
        
        table.setModel(new javax.swing.table.DefaultTableModel(data,colNames){
            boolean[] canEdit = new boolean [3];

            public boolean isCellEditable(int rowIndex, int columnIndex) {  return canEdit [columnIndex];}
        });
        
        table.getColumnModel().getColumn(0).setPreferredWidth(20);
        table.getColumnModel().getColumn(1).setPreferredWidth(500);
        table.getColumnModel().getColumn(2).setPreferredWidth(200);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setRowHeight(20);
    }//End of setTableDatabaseMethodsData method
    
    private void setTableBeanMethodsData(TableBean bean){
        ArrayList<MethodBean> getters=bean.getGetterMethods();
        ArrayList<MethodBean> setters=bean.getSetterMethods();
        
        String[] colNames={"Method Number","Method Name","Class"};
        Object[][] data=new Object[getters.size()*2][colNames.length];
        
        for(int i=0;i<data.length;i+=2){
            MethodBean get=getters.get(i/2);
            MethodBean set=setters.get(i/2);
            int j=0;
            data[i][j++]=i+1;
            data[i][j++]=set.getMethodName();
            data[i][j++]=bean.getBeanName();
            j=0;
            data[i+1][j++]=i+2;
            data[i+1][j++]=get.getMethodName();
            data[i+1][j++]=bean.getBeanName();
        
        }
        
        table.setModel(new javax.swing.table.DefaultTableModel(data,colNames){
            boolean[] canEdit = new boolean [3];

            public boolean isCellEditable(int rowIndex, int columnIndex) {  return canEdit [columnIndex];}
        });
        
        table.getColumnModel().getColumn(0).setPreferredWidth(20);
        table.getColumnModel().getColumn(1).setPreferredWidth(500);
        table.getColumnModel().getColumn(2).setPreferredWidth(200);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setRowHeight(20);
    }//End of setTableBeanMethodsData method
    
    private void setTableColumnsData(TableBean bean){
        ArrayList<ColumnBean> columnList=bean.getColumns();
        String colNames[]={"Column Number","Column Name","Variable","Data Type","Primary Key","Foreign Key","DBManager Method's Arg","Auto Increment"};
        Object[][] data=new Object[columnList.size()][colNames.length];
        
        for(int i=0;i<data.length;i++){
            ColumnBean col=columnList.get(i);
            data[i][0]=""+(i+1);
            data[i][1]=col.getColumnName();
            data[i][2]=col;
            data[i][3]=col.getColumnClassType();
            data[i][4]=col.isPrimaryKey();
            data[i][5]=col.isForeignKey();
            data[i][6]=col.isUseAsArguments();
            data[i][7]=col.isIsAutoIncrement();
        }
        
        table.setModel(new javax.swing.table.DefaultTableModel(data,colNames){
            boolean[] canEdit = new boolean []{false,false,false,false,false,false,true,false};
            public Class getColumnClass(int index){
                switch(index){
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    case 2:
                        return String.class;
                    case 3:
                        return String.class;
                    case 4:
                        return String.class;
                    case 5:
                        return String.class;
                    case 6:
                        return Boolean.class;
                    case 7:
                        return String.class;
                    default:
                        return Boolean.class;
                }
            }
            public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });
        
        table.setRowHeight(20);
    }//End of setTableData method
    
    private void setToStringComboData(TableBean bean){
        toStringCombo.removeAllItems();
        if(bean!=null){
            Iterator<ColumnBean> i=bean.getColumns().iterator();
            while(i.hasNext()){
                ColumnBean column=i.next();
                toStringCombo.addItem(column.getVariableName());
//                System.out.println("Column Name: "+column.getVariableName());
            }
            toStringLabel.setText(bean.getBeanName()+" toString");
            
//            System.out.println("toString variable: "+bean.getToStringVariable().getMethodName().trim());
            
            toStringCombo.setSelectedItem(bean.getToStringVariable().getMethodName().trim());
        }
    }//End of setToStringComboData method
    
    private void setTablesComboData(ArrayList<TableBean> tableList){
        tablesCombo.removeAllItems();
        Iterator<TableBean> i=tableList.iterator();
        while(i.hasNext())
            tablesCombo.addItem(i.next());
        setToStringComboData(tablesCombo.getItemAt(0));
    }//End of setTablesComboData method
    
    private SQLBean getSQLFieldsData(){
        String sqlType=buttonGroup1.getSelection().getActionCommand();
        String dbName=databaseNameField.getText().trim();
        String username=usernameField.getText().trim();
        String password=passwordField.getText().trim();

        if(dbName==null || dbName.trim().equals("")){
            JOptionPane.showMessageDialog(null,"Please Enter Database Name!!!");
            return null;
        }
        
        return new SQLBean(sqlType,dbName,username,password);
    }//End of getSQLField method
    
    private  void clearFields(boolean all){
        if(all){
            databaseNameField.setText("");
            usernameField.setText("");
            passwordField.setText("");
        }
        
        saveField.setText("");
        statusLabel.setText("No Info!!");
        toStringLabel.setText("toString");
        tablesCombo.removeAllItems();
        toStringCombo.removeAllItems();
        table.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}));
        columnsRadio.setSelected(true);        
        setFieldsEnabled(false,true);
    }//End of clearFields method
    
    private void clearFields(){
        clearFields(false);
    }
    
    private void setFieldsEnabled(boolean cond,boolean all){
        if(all){
            dbTableLabel.setEnabled(cond);
            tablesCombo.setEnabled(cond);
            statusLabel.setEnabled(cond);
            showLabel.setEnabled(cond);
            columnsRadio.setEnabled(cond);
            beanMethodsRadio.setEnabled(cond);
            databaseManagerRadio.setEnabled(cond);
            table.setEnabled(cond);
            saveLabel.setEnabled(cond);
            saveField.setEnabled(cond);
            browseBtn.setEnabled(cond);
            databaseManagerCheck.setEnabled(cond);
            beansCheck.setEnabled(cond);
            generateClassesBtn.setEnabled(cond);
            databaseManagerCheck.setSelected(cond);
            beansCheck.setSelected(cond);
        }
        toStringLabel.setEnabled(cond);
        toStringCombo.setEnabled(cond);
    }//End of setFieldsEnabled method
    
    private void setFieldsEnabled(boolean cond){
        setFieldsEnabled(cond,false);
    }//End of overriden setFieldsEnabled method
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton accessRadio;
    private javax.swing.JRadioButton beanMethodsRadio;
    private javax.swing.JCheckBox beansCheck;
    private javax.swing.JButton browseBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton columnsRadio;
    private javax.swing.JCheckBox databaseManagerCheck;
    private javax.swing.JRadioButton databaseManagerRadio;
    private javax.swing.JTextField databaseNameField;
    private javax.swing.JLabel dbTableLabel;
    private javax.swing.JButton generateClassesBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton mySqlRadio;
    private javax.swing.JRadioButton oracleRadio;
    private javax.swing.JTextField passwordField;
    private javax.swing.JTextField saveField;
    private javax.swing.JLabel saveLabel;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel showLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<TableBean> tablesCombo;
    private javax.swing.JComboBox<String> toStringCombo;
    private javax.swing.JLabel toStringLabel;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables

}
